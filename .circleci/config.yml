version: 2.1

# project_tag: udapeople

commands:
  install_aws:
    description: Install AWS CLI 
    steps:
      - run:
          name: install AWS cli on node
          command: |
            apt-get update
            apt-get install -y unzip
            mkdir -p /tmp/awscli
            cd /tmp/awscli
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string   
      when:
        type: string   
        default: on_fail 
    
    steps:


      - when:
          condition:
            and:
              - on_fail
              - equal: [master, << pipeline.git.branch >>]
          steps:
            - run:
                name: Destroy environments
                when: on_fail
                command: |
                  aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
                  aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
                  
                  echo "Waiting for stacks to be deleted..."
                  bucketstatus=$(aws s3api head-bucket --bucket udapeople-<< parameters.workflow_id >> 2>&1)
                  if echo "${bucketstatus}" | grep 'Not Found';
                  then
                    echo "bucket doesn't exist";
                  else
                    aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
                    aws s3 rb s3://udapeople-<< parameters.workflow_id >> --force
                  fi

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string   
      when:
        type: string   
        default: on_fail     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl https://kvdb.io/${KVDB_BUCKET}/DB_MIGRATION_STATUS)
            if(( $SUCCESS==1 )); 
            then
             cd ~/project/backend
             npm install
             npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:14
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd ./frontend
            ls
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:14
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd ./backend
            ls
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:14
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Testing frontend
          command: |
            cd ./frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:14
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Testing backend
          command: |
            cd ./backend
            npm install
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:14
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend dependencies
          command: |
            cd ./frontend
            npm install
            npm audit fix --audit-level=critical 

  scan-backend:
    docker:
      - image: circleci/node:14
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Testing backend
          command: |
            cd ./backend
            npm install
            npm audit fix --audit-level=critical 

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            ls 
            pwd
            curl https://kvdb.io/${KVDB_BUCKET}/BACKEND_IP  -d "${BACKEND_IP}" 
            curl https://kvdb.io/${KVDB_BUCKET}/WORK_ID  -d "${CIRCLE_WORKFLOW_ID:0:7}" 
            echo ${BACKEND_IP} >> ./.circleci/ansible/inventory.txt
            cat ./.circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ['e7:3d:8e:67:76:8c:5a:7d:e8:a8:f5:49:df:fc:f1:3c']
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            pip install awscli
      - run:
          name: Configure server
          command: |
            ls
            pwd
            ansible-playbook -i ./.circleci/ansible/inventory.txt ./.circleci/ansible/configure-server.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: node:14
    steps:
      - checkout
      - install_aws
      - run:
          name: Run migrations
          command: |
            cd ./backend
            pwd
            npm install
            npm run migrations > migrations_log.txt
            cat ./migrations_log.txt
            ls
      - run:
          name: Send migration results to kvDB
          command: |
            sleep 5
            cd ./backend
            pwd
            ls
            if grep "has been executed successfully" migrations_log.txt;
            then
              echo "Database migration has been executed successfully"
              curl https://kvdb.io/${KVDB_BUCKET}/DB_MIGRATION_STATUS -d '1'
            elif grep "No migrations are pending" migrations_log.txt;
            then
              echo "Database migration has been executed successfully"
              curl https://kvdb.io/${KVDB_BUCKET}/DB_MIGRATION_STATUS -d '1'
            else
              echo "Database migration has failed, verify DB setup!"
              curl https://kvdb.io/${KVDB_BUCKET}/DB_MIGRATION_STATUS -d '0'
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      - image: node:14
    steps:
      - checkout
      - install_aws
      - run:
          name: Get backend url and Deploy frontend with backend API Url
          command: |
            BACKEND_IP=$(curl https://kvdb.io/${KVDB_BUCKET}/BACKEND_IP)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}" >> frontend/.env
            cat frontend/.env

            cd ./frontend
            npm i
            npm run build
            
      - run:
          name: Deploying frontend objects to S3
          command: |
            cd ./frontend
            aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ['e7:3d:8e:67:76:8c:5a:7d:e8:a8:f5:49:df:fc:f1:3c']
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache curl
            apk add --no-cache openssh-client
            apk add --no-cache nodejs npm
            apk add --no-cache --upgrade bash
            apk add --update ansible
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            pwd
            ls
            cd backend
            npm i
            npm run build
            cd ..
            tar czf backend.tar.gz backend/
            export ANSIBLE_HOST_KEY_CHECKING=false
            cat ./.circleci/ansible/inventory.txt
            ansible-playbook -i ./.circleci/ansible/inventory.txt ./.circleci/ansible/deploy-backend.yml 
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk --no-cache add curl
            apk add --update npm
            apk add --no-cache python3 py3-pip \
              && pip3 install --upgrade pip \
              && pip install awscli
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(curl https://kvdb.io/${KVDB_BUCKET}/BACKEND_IP)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"

            sleep 10
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi
          
      - run:
          name: Frontend smoke test.
          command: |
            URL="https://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3.amazonaws.com/index.html"
            if curl -s ${URL}| grep  -q "Welcome";
            then
              return 0
            else
              return 1
            fi

      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file ./.circleci/files/cloudfront.yml \
              --tags project=udapeople \
              --stack-name "udapeople-cloudfront-production" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  
      # Here's where you will add some code to rollback on failure  

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Remove old stacks and files
          command: |
            export STACKS=($(aws cloudformation list-stacks \
                --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            export OldWorkflowID=$(aws cloudformation \
                  list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                  --no-paginate --output text)
            
            echo Old Workflow ID: $OldWorkflowID 
            echo Stack names: "${STACKS[@]}"

            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main, master, dev]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          filters:
            branches:
              only: [master]
          requires: [cloudfront-update]